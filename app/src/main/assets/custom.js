// JavaScript –≤–µ—Ä—Å–∏—è uBlock Origin - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
(function() {
    'use strict';
    
    console.log('üõ°Ô∏è uBlock Origin JS –∑–∞–ø—É—â–µ–Ω');
    
    // EasyList –ø—Ä–∞–≤–∏–ª–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    const easyListRules = [
        // –î–æ–º–µ–Ω—ã
        'googlesyndication.com', 'googleadservices.com', 'doubleclick.net',
        'x47b2v9.com', 's.x47b2v9.com', 'popads.net', 'popcash.net',
        'propellerads.com', 'adnxs.com', 'adsystem.com', 'criteo.com',
        
        // –°–µ–ª–µ–∫—Ç–æ—Ä—ã
        '.ad', '.ads', '.advertisement', '.banner', '.adsbygoogle',
        '.sponsored', '.promo', '#ad', '#ads',
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã URL
        '/ads/', '/banner/', '/popup/', '/d.php'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –∫–∞–∫ –≤ uBlock Origin
    function matchesFilter(url, element) {
        if (!url) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω—ã
        for (const rule of easyListRules) {
            if (rule.includes('.com') || rule.includes('.net') || rule.includes('.org')) {
                if (url.includes(rule)) return true;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã URL
        for (const rule of easyListRules) {
            if (rule.startsWith('/') && rule.endsWith('/')) {
                if (url.includes(rule.slice(1, -1))) return true;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if (element) {
            for (const rule of easyListRules) {
                if (rule.startsWith('.') || rule.startsWith('#')) {
                    if (element.matches && element.matches(rule)) return true;
                    if (element.closest && element.closest(rule)) return true;
                }
            }
        }
        
        return false;
    }
    
    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–∞–∫ –≤ uBlock Origin)
    function blockNetworkRequests() {
        // Fetch API
        const originalFetch = window.fetch;
        window.fetch = function(resource, options) {
            const url = typeof resource === 'string' ? resource : resource.url;
            
            // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ —Ç–æ–º—É –∂–µ –¥–æ–º–µ–Ω—É
            if (url.startsWith('/') || url.includes(window.location.hostname)) {
                return originalFetch.apply(this, arguments);
            }
            
            if (matchesFilter(url)) {
                console.log('üõ°Ô∏è uBlock: FETCH –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', url);
                return Promise.reject(new Error('uBlock: blocked'));
            }
            
            return originalFetch.apply(this, arguments);
        };
        
        // XMLHttpRequest
        const originalOpen = XMLHttpRequest.prototype.open;
        XMLHttpRequest.prototype.open = function(method, url) {
            // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ —Ç–æ–º—É –∂–µ –¥–æ–º–µ–Ω—É
            if (url && (url.startsWith('/') || url.includes(window.location.hostname))) {
                return originalOpen.apply(this, arguments);
            }
            
            if (matchesFilter(url)) {
                console.log('üõ°Ô∏è uBlock: XHR –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', url);
                return;
            }
            
            return originalOpen.apply(this, arguments);
        };
    }
    
    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM (–∫–∞–∫ –≤ uBlock Origin)
    function blockDOMElements() {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        easyListRules.forEach(rule => {
            if (rule.startsWith('.') || rule.startsWith('#')) {
                document.querySelectorAll(rule).forEach(el => {
                    console.log('üõ°Ô∏è uBlock: –≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω', rule);
                    el.remove();
                });
            }
        });
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–∞—à–µ–≥–æ —Å–ª—É—á–∞—è
        document.querySelectorAll('div.item.thumb').forEach(item => {
            const header = item.querySelector('header');
            if (header && header.textContent.trim() === 'AD') {
                console.log('üõ°Ô∏è uBlock: –†–µ–∫–ª–∞–º–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º AD —É–¥–∞–ª–µ–Ω–∞');
                item.remove();
                return;
            }
            
            const link = item.querySelector('a[href*="x47b2v9.com"], a[title="Advertisement"]');
            if (link) {
                console.log('üõ°Ô∏è uBlock: –†–µ–∫–ª–∞–º–Ω—ã–π –±–ª–æ–∫ —É–¥–∞–ª–µ–Ω');
                item.remove();
            }
        });
        
        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        document.querySelectorAll('*[src], *[href]').forEach(el => {
            const url = el.src || el.href;
            if (matchesFilter(url, el)) {
                const parent = el.closest('.item') || el.closest('div') || el;
                console.log('üõ°Ô∏è uBlock: –≠–ª–µ–º–µ–Ω—Ç —Å —Ä–µ–∫–ª–∞–º–Ω–æ–π —Å—Å—ã–ª–∫–æ–π —É–¥–∞–ª–µ–Ω');
                parent.remove();
            }
        });
    }
    
    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω (–∫–∞–∫ –≤ uBlock Origin)
    function blockPopups() {
        const originalWindowOpen = window.open;
        window.open = function(url, target, features) {
            // –†–∞–∑—Ä–µ—à–∞–µ–º –æ–∫–Ω–∞ —Å —Ç–æ–≥–æ –∂–µ –¥–æ–º–µ–Ω–∞ (–Ω—É–∂–Ω—ã–µ –¥–ª—è —Å–∞–π—Ç–∞)
            if (!url || url.startsWith('/') || url.includes(window.location.hostname)) {
                console.log('üõ°Ô∏è uBlock: –†–∞–∑—Ä–µ—à–µ–Ω–æ –æ–∫–Ω–æ —Å —Ç–æ–≥–æ –∂–µ –¥–æ–º–µ–Ω–∞');
                return originalWindowOpen.call(this, url, target, features);
            }
            
            if (matchesFilter(url)) {
                console.log('üõ°Ô∏è uBlock: –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ', url);
                return null;
            }
            
            return originalWindowOpen.call(this, url, target, features);
        };
    }
    
    // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM (–∫–∞–∫ –≤ uBlock Origin)
    function observeDOM() {
        const observer = new MutationObserver(mutations => {
            mutations.forEach(mutation => {
                mutation.addedNodes.forEach(node => {
                    if (node.nodeType === 1) { // Element node
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                        if (matchesFilter(node.src || node.href, node)) {
                            console.log('üõ°Ô∏è uBlock: –ù–æ–≤—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
                            node.remove();
                            return;
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                        if (node.querySelectorAll) {
                            easyListRules.forEach(rule => {
                                if (rule.startsWith('.') || rule.startsWith('#')) {
                                    node.querySelectorAll(rule).forEach(el => {
                                        console.log('üõ°Ô∏è uBlock: –í–ª–æ–∂–µ–Ω–Ω—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω');
                                        el.remove();
                                    });
                                }
                            });
                        }
                    }
                });
            });
            
            // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            setTimeout(blockDOMElements, 100);
        });
        
        observer.observe(document.documentElement, {
            childList: true,
            subtree: true
        });
    }
    
    // –í–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    const hookClick = (e) => {
        const origin = e.target.closest('a');
        const isBaseTargetBlank = document.querySelector('head base[target="_blank"]');
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–ª–∏–∫–∏
        if (origin && origin.href && matchesFilter(origin.href, origin)) {
            e.preventDefault();
            e.stopPropagation();
            console.log('üõ°Ô∏è uBlock: –ö–ª–∏–∫ –ø–æ —Ä–µ–∫–ª–∞–º–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', origin.href);
            return false;
        }
        
        console.log('origin', origin, isBaseTargetBlank);
        if ((origin && origin.href && origin.target === '_blank') ||
            (origin && origin.href && isBaseTargetBlank)) {
            e.preventDefault();
            console.log('handle origin', origin);
            location.href = origin.href;
        } else {
            console.log('not handle origin', origin);
        }
    };
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è uBlock Origin JS
    function initUBlockJS() {
        console.log('üõ°Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è uBlock Origin JS...');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
        blockNetworkRequests();
        blockDOMElements();
        blockPopups();
        observeDOM();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
        document.addEventListener('click', hookClick, { capture: true });
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ (–∫–∞–∫ –≤ uBlock Origin)
        setInterval(blockDOMElements, 2000);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è x47b2v9.com
        setInterval(() => {
            document.querySelectorAll('*[href*="x47b2v9.com"], *[src*="x47b2v9.com"]').forEach(el => {
                const parent = el.closest('.item') || el.closest('div') || el;
                parent.remove();
            });
        }, 1000);
        
        console.log('üõ°Ô∏è uBlock Origin JS –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
        console.log('üõ°Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∞–≤–∏–ª:', easyListRules.length);
    }
    
    // –ó–∞–ø—É—Å–∫
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initUBlockJS);
    } else {
        initUBlockJS();
    }
    
})();